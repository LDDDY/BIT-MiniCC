// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: c-lexer.flex

package bit.minisys.minicc.scanner;


@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\25\0\1\1\1\2\1\3\1\4\1\0"+
    "\1\5\1\6\1\7\2\10\1\2\1\11\1\10\1\12"+
    "\1\13\1\2\1\14\7\15\1\16\1\17\1\20\1\10"+
    "\1\21\1\22\1\23\1\24\1\0\4\25\1\26\1\27"+
    "\5\30\1\31\3\30\1\32\4\30\1\33\2\30\1\34"+
    "\2\30\1\10\1\35\1\10\1\2\1\30\1\0\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\30\1\47\1\50\1\51\1\52\1\53\1\54\1\30"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\10\1\66\2\10\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\3\2\1\0\4\2\2\3"+
    "\3\2\21\4\1\2\1\5\1\0\1\2\3\0\1\6"+
    "\1\3\2\0\2\3\1\0\1\3\6\4\1\2\4\4"+
    "\1\2\14\4\4\0\1\7\3\0\1\6\1\0\1\6"+
    "\4\3\1\0\1\3\32\4\5\0\21\4\4\0\10\4"+
    "\2\0\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u01b8\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u03a7\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u01b8\0\u101d\0\u1054"+
    "\0\u108b\0\u01b8\0\u10c2\0\u10f9\0\u1130\0\u01b8\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\3\16\1\17\1\20"+
    "\1\3\1\21\1\11\4\22\1\23\1\22\1\23\1\22"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\22\1\33\1\22\1\34\4\22\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\3\22\1\43\1\0\1\2\107\0"+
    "\1\11\44\0\3\4\1\44\31\4\1\45\14\4\1\0"+
    "\14\4\4\0\1\11\102\0\1\46\1\0\2\11\51\0"+
    "\1\11\13\0\1\11\44\0\7\47\1\0\25\47\1\50"+
    "\14\47\1\0\14\47\100\0\1\11\10\0\1\11\56\0"+
    "\1\11\7\0\2\11\56\0\1\51\4\52\62\0\1\52"+
    "\2\53\2\54\6\0\1\55\2\0\1\56\1\0\1\57"+
    "\1\60\5\0\1\55\5\0\1\61\7\0\1\57\2\0"+
    "\1\60\16\0\1\52\4\16\6\0\1\55\2\0\1\56"+
    "\1\0\1\57\6\0\1\55\5\0\1\61\7\0\1\57"+
    "\31\0\1\11\50\0\1\11\12\0\1\11\1\3\1\11"+
    "\66\0\1\11\1\3\57\0\4\22\5\0\10\22\1\0"+
    "\30\22\4\0\1\4\3\0\1\10\4\0\4\22\5\0"+
    "\10\22\1\0\30\22\15\0\4\22\5\0\10\22\1\0"+
    "\22\22\1\62\5\22\15\0\4\22\5\0\10\22\1\0"+
    "\17\22\1\63\10\22\15\0\4\22\5\0\10\22\1\0"+
    "\1\64\6\22\1\65\5\22\1\66\12\22\15\0\4\22"+
    "\5\0\10\22\1\0\4\22\1\67\10\22\1\70\12\22"+
    "\15\0\4\22\5\0\10\22\1\0\12\22\1\64\1\22"+
    "\1\71\10\22\1\72\2\22\15\0\4\22\5\0\10\22"+
    "\1\0\12\22\1\73\2\22\1\74\12\22\15\0\4\22"+
    "\5\0\10\22\1\0\15\22\1\62\12\22\15\0\4\22"+
    "\5\0\10\22\1\0\5\22\1\75\6\22\1\76\13\22"+
    "\15\0\4\22\5\0\10\22\1\0\15\22\1\77\12\22"+
    "\15\0\4\22\5\0\10\22\1\0\4\22\1\100\23\22"+
    "\15\0\4\22\5\0\10\22\1\0\7\22\1\101\1\102"+
    "\10\22\1\103\2\22\1\104\3\22\15\0\4\22\5\0"+
    "\10\22\1\0\26\22\1\105\1\22\4\0\1\4\3\0"+
    "\1\10\4\0\2\22\1\106\1\22\5\0\10\22\1\0"+
    "\14\22\1\107\13\22\15\0\4\22\5\0\10\22\1\0"+
    "\15\22\1\110\12\22\15\0\4\22\5\0\10\22\1\0"+
    "\7\22\1\111\20\22\23\0\1\11\43\0\1\11\3\0"+
    "\1\4\3\0\1\4\4\0\2\4\6\0\1\4\6\0"+
    "\1\112\1\0\3\4\3\0\1\4\6\0\1\4\2\0"+
    "\1\4\1\0\1\4\1\113\1\4\1\0\1\114\10\0"+
    "\1\115\61\0\7\47\1\116\25\47\1\50\14\47\1\0"+
    "\14\47\3\0\1\47\3\0\1\47\4\0\2\47\6\0"+
    "\1\47\6\0\1\117\1\0\3\47\3\0\1\47\6\0"+
    "\1\47\2\0\1\47\1\0\1\47\1\120\1\47\1\0"+
    "\1\121\16\0\1\11\67\0\4\52\6\0\1\55\1\122"+
    "\1\0\1\122\10\0\1\55\1\122\4\0\1\122\31\0"+
    "\1\52\2\53\2\54\6\0\1\55\2\0\1\56\1\0"+
    "\1\57\6\0\1\55\5\0\1\61\7\0\1\57\21\0"+
    "\1\52\4\54\6\0\1\55\13\0\1\55\35\0\2\123"+
    "\1\0\4\124\100\0\1\125\1\0\1\126\24\0\1\126"+
    "\37\0\1\127\16\0\1\130\31\0\1\131\4\132\5\0"+
    "\3\132\6\0\6\132\56\0\1\126\14\0\1\125\7\0"+
    "\1\126\22\0\4\22\5\0\10\22\1\0\21\22\1\133"+
    "\6\22\15\0\4\22\5\0\10\22\1\0\4\22\1\134"+
    "\23\22\15\0\4\22\5\0\10\22\1\0\20\22\1\135"+
    "\7\22\15\0\4\22\5\0\10\22\1\0\1\74\27\22"+
    "\15\0\4\22\5\0\10\22\1\0\14\22\1\136\13\22"+
    "\15\0\4\22\5\0\10\22\1\0\5\22\1\137\22\22"+
    "\15\0\4\22\5\0\10\22\1\0\22\22\1\140\5\22"+
    "\15\0\4\22\5\0\10\22\1\0\22\22\1\141\5\22"+
    "\15\0\4\22\5\0\10\22\1\0\21\22\1\142\6\22"+
    "\15\0\4\22\5\0\10\22\1\0\15\22\1\143\12\22"+
    "\15\0\4\22\5\0\10\22\1\0\17\22\1\75\10\22"+
    "\15\0\4\22\5\0\10\22\1\0\12\22\1\144\6\22"+
    "\1\75\6\22\15\0\4\22\5\0\10\22\1\0\14\22"+
    "\1\145\13\22\15\0\4\22\5\0\10\22\1\0\6\22"+
    "\1\146\11\22\1\147\1\150\6\22\15\0\4\22\5\0"+
    "\10\22\1\0\15\22\1\151\12\22\15\0\4\22\5\0"+
    "\10\22\1\0\6\22\1\152\20\22\1\153\15\0\4\22"+
    "\5\0\10\22\1\0\1\154\16\22\1\155\10\22\15\0"+
    "\4\22\5\0\10\22\1\0\10\22\1\156\17\22\15\0"+
    "\4\22\5\0\10\22\1\0\16\22\1\157\11\22\4\0"+
    "\1\4\10\0\4\22\5\0\10\22\1\0\30\22\15\0"+
    "\4\22\5\0\10\22\1\0\10\22\1\160\7\22\1\161"+
    "\7\22\15\0\4\22\5\0\10\22\1\0\10\22\1\162"+
    "\1\22\1\163\15\22\15\0\4\22\5\0\10\22\1\0"+
    "\10\22\1\164\17\22\15\0\4\165\5\0\3\165\6\0"+
    "\6\165\37\0\4\166\5\0\3\166\6\0\6\166\37\0"+
    "\4\4\5\0\3\4\6\0\6\4\43\0\1\11\62\0"+
    "\4\167\5\0\3\167\6\0\6\167\37\0\4\170\5\0"+
    "\3\170\6\0\6\170\37\0\4\47\5\0\3\47\6\0"+
    "\6\47\37\0\4\124\63\0\4\124\7\0\1\122\1\0"+
    "\1\122\11\0\1\122\4\0\1\122\51\0\1\126\24\0"+
    "\1\126\37\0\1\126\105\0\1\126\32\0\4\171\5\0"+
    "\3\171\6\0\6\171\36\0\1\171\4\132\5\0\3\132"+
    "\1\0\1\56\1\55\1\57\2\0\6\132\4\0\1\61"+
    "\3\0\1\55\3\0\1\57\22\0\4\22\5\0\10\22"+
    "\1\0\15\22\1\75\12\22\15\0\4\22\5\0\10\22"+
    "\1\0\1\172\27\22\15\0\4\22\5\0\10\22\1\0"+
    "\4\22\1\75\23\22\15\0\4\22\5\0\10\22\1\0"+
    "\20\22\1\173\1\174\6\22\15\0\4\22\5\0\10\22"+
    "\1\0\1\175\27\22\15\0\4\22\5\0\10\22\1\0"+
    "\1\22\1\164\26\22\15\0\4\22\5\0\10\22\1\0"+
    "\13\22\1\75\14\22\15\0\4\22\5\0\10\22\1\0"+
    "\4\22\1\176\23\22\15\0\4\22\5\0\10\22\1\0"+
    "\1\173\27\22\15\0\4\22\5\0\10\22\1\0\10\22"+
    "\1\177\17\22\15\0\4\22\5\0\10\22\1\0\6\22"+
    "\1\75\21\22\15\0\4\22\5\0\10\22\1\0\10\22"+
    "\1\200\17\22\15\0\4\22\5\0\10\22\1\0\21\22"+
    "\1\201\6\22\15\0\4\22\5\0\10\22\1\0\22\22"+
    "\1\176\5\22\15\0\4\22\5\0\10\22\1\0\17\22"+
    "\1\173\10\22\15\0\4\22\5\0\10\22\1\0\14\22"+
    "\1\202\13\22\15\0\4\22\5\0\10\22\1\0\4\22"+
    "\1\203\23\22\15\0\4\22\5\0\10\22\1\0\21\22"+
    "\1\204\6\22\15\0\4\22\5\0\10\22\1\0\22\22"+
    "\1\205\5\22\15\0\4\22\5\0\10\22\1\0\21\22"+
    "\1\206\6\22\15\0\4\22\5\0\10\22\1\0\4\22"+
    "\1\207\23\22\15\0\4\22\5\0\10\22\1\0\15\22"+
    "\1\210\12\22\15\0\4\22\5\0\10\22\1\0\10\22"+
    "\1\211\17\22\15\0\4\22\5\0\10\22\1\0\3\22"+
    "\1\75\24\22\15\0\4\22\5\0\10\22\1\0\1\212"+
    "\27\22\15\0\4\22\5\0\10\22\1\0\12\22\1\135"+
    "\15\22\15\0\4\213\5\0\3\213\6\0\6\213\37\0"+
    "\4\214\5\0\3\214\6\0\6\214\37\0\4\215\5\0"+
    "\3\215\6\0\6\215\37\0\4\216\5\0\3\216\6\0"+
    "\6\216\37\0\4\171\5\0\3\171\2\0\1\55\3\0"+
    "\6\171\10\0\1\55\26\0\4\22\5\0\10\22\1\0"+
    "\11\22\1\75\16\22\15\0\4\22\5\0\10\22\1\0"+
    "\21\22\1\75\6\22\15\0\4\22\5\0\10\22\1\0"+
    "\10\22\1\217\17\22\15\0\4\22\5\0\10\22\1\0"+
    "\22\22\1\220\5\22\15\0\4\22\5\0\10\22\1\0"+
    "\17\22\1\210\10\22\15\0\4\22\5\0\10\22\1\0"+
    "\14\22\1\135\13\22\15\0\4\22\5\0\10\22\1\0"+
    "\20\22\1\221\7\22\15\0\4\22\5\0\10\22\1\0"+
    "\17\22\1\222\10\22\15\0\4\22\5\0\10\22\1\0"+
    "\4\22\1\162\23\22\15\0\4\22\5\0\10\22\1\0"+
    "\15\22\1\223\12\22\15\0\4\22\5\0\10\22\1\0"+
    "\10\22\1\224\17\22\15\0\4\22\5\0\10\22\1\0"+
    "\2\22\1\173\25\22\15\0\4\22\5\0\10\22\1\0"+
    "\2\22\1\225\25\22\15\0\4\22\5\0\10\22\1\0"+
    "\3\22\1\226\24\22\15\0\4\22\5\0\10\22\1\0"+
    "\14\22\1\75\13\22\15\0\4\22\5\0\10\22\1\0"+
    "\6\22\1\152\21\22\15\0\4\22\5\0\10\22\1\0"+
    "\21\22\1\111\6\22\15\0\4\227\5\0\3\227\6\0"+
    "\6\227\37\0\4\114\5\0\3\114\6\0\6\114\37\0"+
    "\4\230\5\0\3\230\6\0\6\230\37\0\4\121\5\0"+
    "\3\121\6\0\6\121\37\0\4\22\5\0\10\22\1\0"+
    "\14\22\1\231\13\22\15\0\4\22\5\0\10\22\1\0"+
    "\12\22\1\173\15\22\15\0\4\22\5\0\10\22\1\0"+
    "\21\22\1\232\6\22\15\0\4\22\5\0\10\22\1\0"+
    "\10\22\1\205\17\22\15\0\4\22\5\0\10\22\1\0"+
    "\5\22\1\75\22\22\15\0\4\22\5\0\10\22\1\0"+
    "\2\22\1\75\25\22\15\0\4\22\5\0\10\22\1\0"+
    "\7\22\1\75\20\22\15\0\4\22\5\0\10\22\1\0"+
    "\4\22\1\223\23\22\15\0\4\113\5\0\3\113\6\0"+
    "\6\113\37\0\4\120\5\0\3\120\6\0\6\120\37\0"+
    "\4\22\5\0\10\22\1\0\22\22\1\135\5\22\15\0"+
    "\4\22\5\0\10\22\1\0\4\22\1\74\23\22\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8195];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\3\1\1\0\1\11\32\1\1\11"+
    "\1\0\1\1\3\0\2\1\2\0\2\1\1\0\31\1"+
    "\4\0\1\11\3\0\1\11\1\0\2\1\1\11\2\1"+
    "\1\0\33\1\5\0\21\1\4\0\10\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public enum TypeName {
        identifier,
        integer_constant,
        floating_constant,
        character_constant,
        string_literal,
        blank
    }

    public int getLineNum() {
        return yyline;
    }

    public int getColNum() {
        return yycolumn;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public String yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return "EOF";
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TypeName.blank.name();
            }
          // fall through
          case 8: break;
          case 2:
            { return "\'" + yytext() + "\'";
            }
          // fall through
          case 9: break;
          case 3:
            { return TypeName.integer_constant.name();
            }
          // fall through
          case 10: break;
          case 4:
            { return TypeName.identifier.name();
            }
          // fall through
          case 11: break;
          case 5:
            { return TypeName.string_literal.name();
            }
          // fall through
          case 12: break;
          case 6:
            { return TypeName.floating_constant.name();
            }
          // fall through
          case 13: break;
          case 7:
            { return TypeName.character_constant.name();
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
